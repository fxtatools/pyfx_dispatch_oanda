# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import pyfx.dispatch.oanda
from pyfx.dispatch.oanda.models.account_changes import AccountChanges  # noqa: E501
from pyfx.dispatch.oanda.rest import ApiException

class TestAccountChanges(unittest.TestCase):
    """AccountChanges unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AccountChanges
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccountChanges`
        """
        model = pyfx.dispatch.oanda.models.account_changes.AccountChanges()  # noqa: E501
        if include_optional :
            return AccountChanges(
                orders_created = [
                    pyfx.dispatch.oanda.models.order.Order(
                        id = '', 
                        create_time = '', 
                        state = 'PENDING', 
                        client_extensions = pyfx.dispatch.oanda.models.client_extensions.ClientExtensions(
                            id = '', 
                            tag = '', 
                            comment = '', ), )
                    ], 
                orders_cancelled = [
                    pyfx.dispatch.oanda.models.order.Order(
                        id = '', 
                        create_time = '', 
                        state = 'PENDING', 
                        client_extensions = pyfx.dispatch.oanda.models.client_extensions.ClientExtensions(
                            id = '', 
                            tag = '', 
                            comment = '', ), )
                    ], 
                orders_filled = [
                    pyfx.dispatch.oanda.models.order.Order(
                        id = '', 
                        create_time = '', 
                        state = 'PENDING', 
                        client_extensions = pyfx.dispatch.oanda.models.client_extensions.ClientExtensions(
                            id = '', 
                            tag = '', 
                            comment = '', ), )
                    ], 
                orders_triggered = [
                    pyfx.dispatch.oanda.models.order.Order(
                        id = '', 
                        create_time = '', 
                        state = 'PENDING', 
                        client_extensions = pyfx.dispatch.oanda.models.client_extensions.ClientExtensions(
                            id = '', 
                            tag = '', 
                            comment = '', ), )
                    ], 
                trades_opened = [
                    pyfx.dispatch.oanda.models.trade_summary.TradeSummary(
                        id = '', 
                        instrument = '', 
                        price = '', 
                        open_time = '', 
                        state = 'OPEN', 
                        initial_units = '', 
                        initial_margin_required = '', 
                        current_units = '', 
                        realized_pl = '', 
                        unrealized_pl = '', 
                        margin_used = '', 
                        average_close_price = '', 
                        closing_transaction_ids = [
                            ''
                            ], 
                        financing = '', 
                        close_time = '', 
                        client_extensions = pyfx.dispatch.oanda.models.client_extensions.ClientExtensions(
                            id = '', 
                            tag = '', 
                            comment = '', ), 
                        take_profit_order_id = '', 
                        stop_loss_order_id = '', 
                        trailing_stop_loss_order_id = '', )
                    ], 
                trades_reduced = [
                    pyfx.dispatch.oanda.models.trade_summary.TradeSummary(
                        id = '', 
                        instrument = '', 
                        price = '', 
                        open_time = '', 
                        state = 'OPEN', 
                        initial_units = '', 
                        initial_margin_required = '', 
                        current_units = '', 
                        realized_pl = '', 
                        unrealized_pl = '', 
                        margin_used = '', 
                        average_close_price = '', 
                        closing_transaction_ids = [
                            ''
                            ], 
                        financing = '', 
                        close_time = '', 
                        client_extensions = pyfx.dispatch.oanda.models.client_extensions.ClientExtensions(
                            id = '', 
                            tag = '', 
                            comment = '', ), 
                        take_profit_order_id = '', 
                        stop_loss_order_id = '', 
                        trailing_stop_loss_order_id = '', )
                    ], 
                trades_closed = [
                    pyfx.dispatch.oanda.models.trade_summary.TradeSummary(
                        id = '', 
                        instrument = '', 
                        price = '', 
                        open_time = '', 
                        state = 'OPEN', 
                        initial_units = '', 
                        initial_margin_required = '', 
                        current_units = '', 
                        realized_pl = '', 
                        unrealized_pl = '', 
                        margin_used = '', 
                        average_close_price = '', 
                        closing_transaction_ids = [
                            ''
                            ], 
                        financing = '', 
                        close_time = '', 
                        client_extensions = pyfx.dispatch.oanda.models.client_extensions.ClientExtensions(
                            id = '', 
                            tag = '', 
                            comment = '', ), 
                        take_profit_order_id = '', 
                        stop_loss_order_id = '', 
                        trailing_stop_loss_order_id = '', )
                    ], 
                positions = [
                    pyfx.dispatch.oanda.models.position.Position(
                        instrument = '', 
                        pl = '', 
                        unrealized_pl = '', 
                        margin_used = '', 
                        resettable_pl = '', 
                        financing = '', 
                        commission = '', 
                        guaranteed_execution_fees = '', 
                        long = pyfx.dispatch.oanda.models.position_side.PositionSide(
                            units = '', 
                            average_price = '', 
                            trade_ids = [
                                ''
                                ], 
                            pl = '', 
                            unrealized_pl = '', 
                            resettable_pl = '', 
                            financing = '', 
                            guaranteed_execution_fees = '', ), 
                        short = pyfx.dispatch.oanda.models.position_side.PositionSide(
                            units = '', 
                            average_price = '', 
                            pl = '', 
                            unrealized_pl = '', 
                            resettable_pl = '', 
                            financing = '', 
                            guaranteed_execution_fees = '', ), )
                    ], 
                transactions = [
                    pyfx.dispatch.oanda.models.transaction.Transaction(
                        id = '', 
                        time = '', 
                        user_id = 56, 
                        account_id = '', 
                        batch_id = '', 
                        request_id = '', )
                    ]
            )
        else :
            return AccountChanges(
        )
        """

    def testAccountChanges(self):
        """Test AccountChanges"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
