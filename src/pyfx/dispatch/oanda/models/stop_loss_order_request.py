# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from pyfx.dispatch.oanda.models.client_extensions import ClientExtensions

class StopLossOrderRequest(BaseModel):
    """
    A StopLossOrderRequest specifies the parameters that may be set when creating a Stop Loss Order. Only one of the price and distance fields may be specified.
    """
    type: Optional[StrictStr] = Field(None, description="The type of the Order to Create. Must be set to \"STOP_LOSS\" when creating a Stop Loss Order.")
    trade_id: Optional[StrictStr] = Field(None, alias="tradeID", description="The ID of the Trade to close when the price threshold is breached.")
    client_trade_id: Optional[StrictStr] = Field(None, alias="clientTradeID", description="The client ID of the Trade to be closed when the price threshold is breached.")
    price: Optional[StrictStr] = Field(None, description="The price threshold specified for the Stop Loss Order. If the guaranteed flag is false, the associated Trade will be closed by a market price that is equal to or worse than this threshold. If the flag is true the associated Trade will be closed at this price.")
    distance: Optional[StrictStr] = Field(None, description="Specifies the distance (in price units) from the Account's current price to use as the Stop Loss Order price. If the Trade is short the Instrument's bid price is used, and for long Trades the ask is used.")
    time_in_force: Optional[StrictStr] = Field(None, alias="timeInForce", description="The time-in-force requested for the StopLoss Order. Restricted to \"GTC\", \"GFD\" and \"GTD\" for StopLoss Orders.")
    gtd_time: Optional[StrictStr] = Field(None, alias="gtdTime", description="The date/time when the StopLoss Order will be cancelled if its timeInForce is \"GTD\".")
    trigger_condition: Optional[StrictStr] = Field(None, alias="triggerCondition", description="Specification of which price component should be used when determining if an Order should be triggered and filled. This allows Orders to be triggered based on the bid, ask, mid, default (ask for buy, bid for sell) or inverse (ask for sell, bid for buy) price depending on the desired behaviour. Orders are always filled using their default price component. This feature is only provided through the REST API. Clients who choose to specify a non-default trigger condition will not see it reflected in any of OANDA's proprietary or partner trading platforms, their transaction history or their account statements. OANDA platforms always assume that an Order's trigger condition is set to the default value when indicating the distance from an Order's trigger price, and will always provide the default trigger condition when creating or modifying an Order. A special restriction applies when creating a guaranteed Stop Loss Order. In this case the TriggerCondition value must either be \"DEFAULT\", or the \"natural\" trigger side \"DEFAULT\" results in. So for a Stop Loss Order for a long trade valid values are \"DEFAULT\" and \"BID\", and for short trades \"DEFAULT\" and \"ASK\" are valid.")
    guaranteed: Optional[StrictBool] = Field(None, description="Flag indicating that the Stop Loss Order is guaranteed. The default value depends on the GuaranteedStopLossOrderMode of the account, if it is REQUIRED, the default will be true, for DISABLED or ENABLED the default is false.")
    client_extensions: Optional[ClientExtensions] = Field(None, alias="clientExtensions")
    additional_properties: Dict[str, Any] = {}
    __properties = ["type", "tradeID", "clientTradeID", "price", "distance", "timeInForce", "gtdTime", "triggerCondition", "guaranteed", "clientExtensions"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MARKET', 'LIMIT', 'STOP', 'MARKET_IF_TOUCHED', 'TAKE_PROFIT', 'STOP_LOSS', 'TRAILING_STOP_LOSS', 'FIXED_PRICE'):
            raise ValueError("must be one of enum values ('MARKET', 'LIMIT', 'STOP', 'MARKET_IF_TOUCHED', 'TAKE_PROFIT', 'STOP_LOSS', 'TRAILING_STOP_LOSS', 'FIXED_PRICE')")
        return value

    @validator('time_in_force')
    def time_in_force_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('GTC', 'GTD', 'GFD', 'FOK', 'IOC'):
            raise ValueError("must be one of enum values ('GTC', 'GTD', 'GFD', 'FOK', 'IOC')")
        return value

    @validator('trigger_condition')
    def trigger_condition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DEFAULT', 'INVERSE', 'BID', 'ASK', 'MID'):
            raise ValueError("must be one of enum values ('DEFAULT', 'INVERSE', 'BID', 'ASK', 'MID')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = __debug__

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> "StopLossOrderRequest":
        """Create an instance of StopLossOrderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of client_extensions
        if self.client_extensions:
            _dict['clientExtensions'] = self.client_extensions.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StopLossOrderRequest:
        """Create an instance of StopLossOrderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StopLossOrderRequest.parse_obj(obj)

        _obj = StopLossOrderRequest.parse_obj({
            "type": obj.get("type"),
            "trade_id": obj.get("tradeID"),
            "client_trade_id": obj.get("clientTradeID"),
            "price": obj.get("price"),
            "distance": obj.get("distance"),
            "time_in_force": obj.get("timeInForce"),
            "gtd_time": obj.get("gtdTime"),
            "trigger_condition": obj.get("triggerCondition"),
            "guaranteed": obj.get("guaranteed"),
            "client_extensions": ClientExtensions.from_dict(obj.get("clientExtensions")) if obj.get("clientExtensions") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


