# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from pyfx.dispatch.oanda.models.order_cancel_transaction import OrderCancelTransaction
from pyfx.dispatch.oanda.models.order_fill_transaction import OrderFillTransaction
from pyfx.dispatch.oanda.models.transaction import Transaction

class CreateOrder201Response(BaseModel):
    """
    CreateOrder201Response
    """
    order_create_transaction: Optional[Transaction] = Field(None, alias="orderCreateTransaction")
    order_fill_transaction: Optional[OrderFillTransaction] = Field(None, alias="orderFillTransaction")
    order_cancel_transaction: Optional[OrderCancelTransaction] = Field(None, alias="orderCancelTransaction")
    order_reissue_transaction: Optional[Transaction] = Field(None, alias="orderReissueTransaction")
    order_reissue_reject_transaction: Optional[Transaction] = Field(None, alias="orderReissueRejectTransaction")
    related_transaction_ids: Optional[conlist(StrictStr)] = Field(None, alias="relatedTransactionIDs", description="The IDs of all Transactions that were created while satisfying the request.")
    last_transaction_id: Optional[StrictStr] = Field(None, alias="lastTransactionID", description="The ID of the most recent Transaction created for the Account")
    additional_properties: Dict[str, Any] = {}
    __properties = ["orderCreateTransaction", "orderFillTransaction", "orderCancelTransaction", "orderReissueTransaction", "orderReissueRejectTransaction", "relatedTransactionIDs", "lastTransactionID"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = __debug__

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> "CreateOrder201Response":
        """Create an instance of CreateOrder201Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of order_create_transaction
        if self.order_create_transaction:
            _dict['orderCreateTransaction'] = self.order_create_transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_fill_transaction
        if self.order_fill_transaction:
            _dict['orderFillTransaction'] = self.order_fill_transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_cancel_transaction
        if self.order_cancel_transaction:
            _dict['orderCancelTransaction'] = self.order_cancel_transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_reissue_transaction
        if self.order_reissue_transaction:
            _dict['orderReissueTransaction'] = self.order_reissue_transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_reissue_reject_transaction
        if self.order_reissue_reject_transaction:
            _dict['orderReissueRejectTransaction'] = self.order_reissue_reject_transaction.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateOrder201Response:
        """Create an instance of CreateOrder201Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateOrder201Response.parse_obj(obj)

        _obj = CreateOrder201Response.parse_obj({
            "order_create_transaction": Transaction.from_dict(obj.get("orderCreateTransaction")) if obj.get("orderCreateTransaction") is not None else None,
            "order_fill_transaction": OrderFillTransaction.from_dict(obj.get("orderFillTransaction")) if obj.get("orderFillTransaction") is not None else None,
            "order_cancel_transaction": OrderCancelTransaction.from_dict(obj.get("orderCancelTransaction")) if obj.get("orderCancelTransaction") is not None else None,
            "order_reissue_transaction": Transaction.from_dict(obj.get("orderReissueTransaction")) if obj.get("orderReissueTransaction") is not None else None,
            "order_reissue_reject_transaction": Transaction.from_dict(obj.get("orderReissueRejectTransaction")) if obj.get("orderReissueRejectTransaction") is not None else None,
            "related_transaction_ids": obj.get("relatedTransactionIDs"),
            "last_transaction_id": obj.get("lastTransactionID")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


