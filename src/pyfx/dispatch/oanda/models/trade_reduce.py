# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class TradeReduce(BaseModel):
    """
    A TradeReduce object represents a Trade for an instrument that was reduced (either partially or fully) in an Account. It is found embedded in Transactions that affect the position of an instrument in the account, specifically the OrderFill Transaction.
    """
    trade_id: Optional[StrictStr] = Field(None, alias="tradeID", description="The ID of the Trade that was reduced or closed")
    units: Optional[StrictStr] = Field(None, description="The number of units that the Trade was reduced by")
    price: Optional[StrictStr] = Field(None, description="The average price that the units were closed at. This price may be clamped for guaranteed Stop Loss Orders.")
    realized_pl: Optional[StrictStr] = Field(None, alias="realizedPL", description="The PL realized when reducing the Trade")
    financing: Optional[StrictStr] = Field(None, description="The financing paid/collected when reducing the Trade")
    guaranteed_execution_fee: Optional[StrictStr] = Field(None, alias="guaranteedExecutionFee", description="This is the fee that is charged for closing the Trade if it has a guaranteed Stop Loss Order attached to it.")
    half_spread_cost: Optional[StrictStr] = Field(None, alias="halfSpreadCost", description="The half spread cost for the trade reduce/close. This can be a positive or negative value and is represented in the home currency of the Account.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["tradeID", "units", "price", "realizedPL", "financing", "guaranteedExecutionFee", "halfSpreadCost"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = __debug__

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> "TradeReduce":
        """Create an instance of TradeReduce from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TradeReduce:
        """Create an instance of TradeReduce from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TradeReduce.parse_obj(obj)

        _obj = TradeReduce.parse_obj({
            "trade_id": obj.get("tradeID"),
            "units": obj.get("units"),
            "price": obj.get("price"),
            "realized_pl": obj.get("realizedPL"),
            "financing": obj.get("financing"),
            "guaranteed_execution_fee": obj.get("guaranteedExecutionFee"),
            "half_spread_cost": obj.get("halfSpreadCost")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


