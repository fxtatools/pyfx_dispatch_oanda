# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class PositionSide(BaseModel):
    """
    The representation of a Position for a single direction (long or short).
    """
    units: Optional[StrictStr] = Field(None, description="Number of units in the position (negative value indicates short position, positive indicates long position).")
    average_price: Optional[StrictStr] = Field(None, alias="averagePrice", description="Volume-weighted average of the underlying Trade open prices for the Position.")
    trade_ids: Optional[conlist(StrictStr)] = Field(None, alias="tradeIDs", description="List of the open Trade IDs which contribute to the open Position.")
    pl: Optional[StrictStr] = Field(None, description="Profit/loss realized by the PositionSide over the lifetime of the Account.")
    unrealized_pl: Optional[StrictStr] = Field(None, alias="unrealizedPL", description="The unrealized profit/loss of all open Trades that contribute to this PositionSide.")
    resettable_pl: Optional[StrictStr] = Field(None, alias="resettablePL", description="Profit/loss realized by the PositionSide since the Account's resettablePL was last reset by the client.")
    financing: Optional[StrictStr] = Field(None, description="The total amount of financing paid/collected for this PositionSide over the lifetime of the Account.")
    guaranteed_execution_fees: Optional[StrictStr] = Field(None, alias="guaranteedExecutionFees", description="The total amount of fees charged over the lifetime of the Account for the execution of guaranteed Stop Loss Orders attached to Trades for this PositionSide.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["units", "averagePrice", "tradeIDs", "pl", "unrealizedPL", "resettablePL", "financing", "guaranteedExecutionFees"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = __debug__

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> "PositionSide":
        """Create an instance of PositionSide from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PositionSide:
        """Create an instance of PositionSide from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PositionSide.parse_obj(obj)

        _obj = PositionSide.parse_obj({
            "units": obj.get("units"),
            "average_price": obj.get("averagePrice"),
            "trade_ids": obj.get("tradeIDs"),
            "pl": obj.get("pl"),
            "unrealized_pl": obj.get("unrealizedPL"),
            "resettable_pl": obj.get("resettablePL"),
            "financing": obj.get("financing"),
            "guaranteed_execution_fees": obj.get("guaranteedExecutionFees")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


