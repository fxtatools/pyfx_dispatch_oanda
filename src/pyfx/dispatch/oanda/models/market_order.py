# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from pyfx.dispatch.oanda.models.client_extensions import ClientExtensions
from pyfx.dispatch.oanda.models.market_order_delayed_trade_close import MarketOrderDelayedTradeClose
from pyfx.dispatch.oanda.models.market_order_margin_closeout import MarketOrderMarginCloseout
from pyfx.dispatch.oanda.models.market_order_position_closeout import MarketOrderPositionCloseout
from pyfx.dispatch.oanda.models.market_order_trade_close import MarketOrderTradeClose
from pyfx.dispatch.oanda.models.stop_loss_details import StopLossDetails
from pyfx.dispatch.oanda.models.take_profit_details import TakeProfitDetails
from pyfx.dispatch.oanda.models.trailing_stop_loss_details import TrailingStopLossDetails

class MarketOrder(BaseModel):
    """
    A MarketOrder is an order that is filled immediately upon creation using the current market price.
    """
    id: Optional[StrictStr] = Field(None, description="The Order's identifier, unique within the Order's Account.")
    create_time: Optional[StrictStr] = Field(None, alias="createTime", description="The time when the Order was created.")
    state: Optional[StrictStr] = Field(None, description="The current state of the Order.")
    client_extensions: Optional[ClientExtensions] = Field(None, alias="clientExtensions")
    type: Optional[StrictStr] = Field(None, description="The type of the Order. Always set to \"MARKET\" for Market Orders.")
    instrument: Optional[StrictStr] = Field(None, description="The Market Order's Instrument.")
    units: Optional[StrictStr] = Field(None, description="The quantity requested to be filled by the Market Order. A posititive number of units results in a long Order, and a negative number of units results in a short Order.")
    time_in_force: Optional[StrictStr] = Field(None, alias="timeInForce", description="The time-in-force requested for the Market Order. Restricted to FOK or IOC for a MarketOrder.")
    price_bound: Optional[StrictStr] = Field(None, alias="priceBound", description="The worst price that the client is willing to have the Market Order filled at.")
    position_fill: Optional[StrictStr] = Field(None, alias="positionFill", description="Specification of how Positions in the Account are modified when the Order is filled.")
    trade_close: Optional[MarketOrderTradeClose] = Field(None, alias="tradeClose")
    long_position_closeout: Optional[MarketOrderPositionCloseout] = Field(None, alias="longPositionCloseout")
    short_position_closeout: Optional[MarketOrderPositionCloseout] = Field(None, alias="shortPositionCloseout")
    margin_closeout: Optional[MarketOrderMarginCloseout] = Field(None, alias="marginCloseout")
    delayed_trade_close: Optional[MarketOrderDelayedTradeClose] = Field(None, alias="delayedTradeClose")
    take_profit_on_fill: Optional[TakeProfitDetails] = Field(None, alias="takeProfitOnFill")
    stop_loss_on_fill: Optional[StopLossDetails] = Field(None, alias="stopLossOnFill")
    trailing_stop_loss_on_fill: Optional[TrailingStopLossDetails] = Field(None, alias="trailingStopLossOnFill")
    trade_client_extensions: Optional[ClientExtensions] = Field(None, alias="tradeClientExtensions")
    filling_transaction_id: Optional[StrictStr] = Field(None, alias="fillingTransactionID", description="ID of the Transaction that filled this Order (only provided when the Order's state is FILLED)")
    filled_time: Optional[StrictStr] = Field(None, alias="filledTime", description="Date/time when the Order was filled (only provided when the Order's state is FILLED)")
    trade_opened_id: Optional[StrictStr] = Field(None, alias="tradeOpenedID", description="Trade ID of Trade opened when the Order was filled (only provided when the Order's state is FILLED and a Trade was opened as a result of the fill)")
    trade_reduced_id: Optional[StrictStr] = Field(None, alias="tradeReducedID", description="Trade ID of Trade reduced when the Order was filled (only provided when the Order's state is FILLED and a Trade was reduced as a result of the fill)")
    trade_closed_ids: Optional[conlist(StrictStr)] = Field(None, alias="tradeClosedIDs", description="Trade IDs of Trades closed when the Order was filled (only provided when the Order's state is FILLED and one or more Trades were closed as a result of the fill)")
    cancelling_transaction_id: Optional[StrictStr] = Field(None, alias="cancellingTransactionID", description="ID of the Transaction that cancelled the Order (only provided when the Order's state is CANCELLED)")
    cancelled_time: Optional[StrictStr] = Field(None, alias="cancelledTime", description="Date/time when the Order was cancelled (only provided when the state of the Order is CANCELLED)")
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "createTime", "state", "clientExtensions", "type", "instrument", "units", "timeInForce", "priceBound", "positionFill", "tradeClose", "longPositionCloseout", "shortPositionCloseout", "marginCloseout", "delayedTradeClose", "takeProfitOnFill", "stopLossOnFill", "trailingStopLossOnFill", "tradeClientExtensions", "fillingTransactionID", "filledTime", "tradeOpenedID", "tradeReducedID", "tradeClosedIDs", "cancellingTransactionID", "cancelledTime"]

    @validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PENDING', 'FILLED', 'TRIGGERED', 'CANCELLED'):
            raise ValueError("must be one of enum values ('PENDING', 'FILLED', 'TRIGGERED', 'CANCELLED')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MARKET', 'LIMIT', 'STOP', 'MARKET_IF_TOUCHED', 'TAKE_PROFIT', 'STOP_LOSS', 'TRAILING_STOP_LOSS', 'FIXED_PRICE'):
            raise ValueError("must be one of enum values ('MARKET', 'LIMIT', 'STOP', 'MARKET_IF_TOUCHED', 'TAKE_PROFIT', 'STOP_LOSS', 'TRAILING_STOP_LOSS', 'FIXED_PRICE')")
        return value

    @validator('time_in_force')
    def time_in_force_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('GTC', 'GTD', 'GFD', 'FOK', 'IOC'):
            raise ValueError("must be one of enum values ('GTC', 'GTD', 'GFD', 'FOK', 'IOC')")
        return value

    @validator('position_fill')
    def position_fill_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('OPEN_ONLY', 'REDUCE_FIRST', 'REDUCE_ONLY', 'DEFAULT'):
            raise ValueError("must be one of enum values ('OPEN_ONLY', 'REDUCE_FIRST', 'REDUCE_ONLY', 'DEFAULT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> "MarketOrder":
        """Create an instance of MarketOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of client_extensions
        if self.client_extensions:
            _dict['clientExtensions'] = self.client_extensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trade_close
        if self.trade_close:
            _dict['tradeClose'] = self.trade_close.to_dict()
        # override the default output from pydantic by calling `to_dict()` of long_position_closeout
        if self.long_position_closeout:
            _dict['longPositionCloseout'] = self.long_position_closeout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of short_position_closeout
        if self.short_position_closeout:
            _dict['shortPositionCloseout'] = self.short_position_closeout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of margin_closeout
        if self.margin_closeout:
            _dict['marginCloseout'] = self.margin_closeout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delayed_trade_close
        if self.delayed_trade_close:
            _dict['delayedTradeClose'] = self.delayed_trade_close.to_dict()
        # override the default output from pydantic by calling `to_dict()` of take_profit_on_fill
        if self.take_profit_on_fill:
            _dict['takeProfitOnFill'] = self.take_profit_on_fill.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stop_loss_on_fill
        if self.stop_loss_on_fill:
            _dict['stopLossOnFill'] = self.stop_loss_on_fill.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trailing_stop_loss_on_fill
        if self.trailing_stop_loss_on_fill:
            _dict['trailingStopLossOnFill'] = self.trailing_stop_loss_on_fill.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trade_client_extensions
        if self.trade_client_extensions:
            _dict['tradeClientExtensions'] = self.trade_client_extensions.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MarketOrder:
        """Create an instance of MarketOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MarketOrder.parse_obj(obj)

        _obj = MarketOrder.parse_obj({
            "id": obj.get("id"),
            "create_time": obj.get("createTime"),
            "state": obj.get("state"),
            "client_extensions": ClientExtensions.from_dict(obj.get("clientExtensions")) if obj.get("clientExtensions") is not None else None,
            "type": obj.get("type"),
            "instrument": obj.get("instrument"),
            "units": obj.get("units"),
            "time_in_force": obj.get("timeInForce"),
            "price_bound": obj.get("priceBound"),
            "position_fill": obj.get("positionFill"),
            "trade_close": MarketOrderTradeClose.from_dict(obj.get("tradeClose")) if obj.get("tradeClose") is not None else None,
            "long_position_closeout": MarketOrderPositionCloseout.from_dict(obj.get("longPositionCloseout")) if obj.get("longPositionCloseout") is not None else None,
            "short_position_closeout": MarketOrderPositionCloseout.from_dict(obj.get("shortPositionCloseout")) if obj.get("shortPositionCloseout") is not None else None,
            "margin_closeout": MarketOrderMarginCloseout.from_dict(obj.get("marginCloseout")) if obj.get("marginCloseout") is not None else None,
            "delayed_trade_close": MarketOrderDelayedTradeClose.from_dict(obj.get("delayedTradeClose")) if obj.get("delayedTradeClose") is not None else None,
            "take_profit_on_fill": TakeProfitDetails.from_dict(obj.get("takeProfitOnFill")) if obj.get("takeProfitOnFill") is not None else None,
            "stop_loss_on_fill": StopLossDetails.from_dict(obj.get("stopLossOnFill")) if obj.get("stopLossOnFill") is not None else None,
            "trailing_stop_loss_on_fill": TrailingStopLossDetails.from_dict(obj.get("trailingStopLossOnFill")) if obj.get("trailingStopLossOnFill") is not None else None,
            "trade_client_extensions": ClientExtensions.from_dict(obj.get("tradeClientExtensions")) if obj.get("tradeClientExtensions") is not None else None,
            "filling_transaction_id": obj.get("fillingTransactionID"),
            "filled_time": obj.get("filledTime"),
            "trade_opened_id": obj.get("tradeOpenedID"),
            "trade_reduced_id": obj.get("tradeReducedID"),
            "trade_closed_ids": obj.get("tradeClosedIDs"),
            "cancelling_transaction_id": obj.get("cancellingTransactionID"),
            "cancelled_time": obj.get("cancelledTime")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


