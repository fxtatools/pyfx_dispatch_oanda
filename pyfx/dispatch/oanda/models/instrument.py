# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25
    Contact: api@oanda.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from pyfx.dispatch.oanda.models.instrument_commission import InstrumentCommission

class Instrument(BaseModel):
    """
    Full specification of an Instrument.
    """
    name: Optional[StrictStr] = Field(None, description="The name of the Instrument")
    type: Optional[StrictStr] = Field(None, description="The type of the Instrument")
    display_name: Optional[StrictStr] = Field(None, alias="displayName", description="The display name of the Instrument")
    pip_location: Optional[StrictInt] = Field(None, alias="pipLocation", description="The location of the \"pip\" for this instrument. The decimal position of the pip in this Instrument's price can be found at 10 ^ pipLocation (e.g. -4 pipLocation results in a decimal pip position of 10 ^ -4 = 0.0001).")
    display_precision: Optional[StrictInt] = Field(None, alias="displayPrecision", description="The number of decimal places that should be used to display prices for this instrument. (e.g. a displayPrecision of 5 would result in a price of \"1\" being displayed as \"1.00000\")")
    trade_units_precision: Optional[StrictInt] = Field(None, alias="tradeUnitsPrecision", description="The amount of decimal places that may be provided when specifying the number of units traded for this instrument.")
    minimum_trade_size: Optional[StrictStr] = Field(None, alias="minimumTradeSize", description="The smallest number of units allowed to be traded for this instrument.")
    maximum_trailing_stop_distance: Optional[StrictStr] = Field(None, alias="maximumTrailingStopDistance", description="The maximum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units.")
    minimum_trailing_stop_distance: Optional[StrictStr] = Field(None, alias="minimumTrailingStopDistance", description="The minimum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units.")
    maximum_position_size: Optional[StrictStr] = Field(None, alias="maximumPositionSize", description="The maximum position size allowed for this instrument. Specified in units.")
    maximum_order_units: Optional[StrictStr] = Field(None, alias="maximumOrderUnits", description="The maximum units allowed for an Order placed for this instrument. Specified in units.")
    margin_rate: Optional[StrictStr] = Field(None, alias="marginRate", description="The margin rate for this instrument.")
    commission: Optional[InstrumentCommission] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["name", "type", "displayName", "pipLocation", "displayPrecision", "tradeUnitsPrecision", "minimumTradeSize", "maximumTrailingStopDistance", "minimumTrailingStopDistance", "maximumPositionSize", "maximumOrderUnits", "marginRate", "commission"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CURRENCY', 'CFD', 'METAL'):
            raise ValueError("must be one of enum values ('CURRENCY', 'CFD', 'METAL')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Instrument:
        """Create an instance of Instrument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of commission
        if self.commission:
            _dict['commission'] = self.commission.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Instrument:
        """Create an instance of Instrument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Instrument.parse_obj(obj)

        _obj = Instrument.parse_obj({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "display_name": obj.get("displayName"),
            "pip_location": obj.get("pipLocation"),
            "display_precision": obj.get("displayPrecision"),
            "trade_units_precision": obj.get("tradeUnitsPrecision"),
            "minimum_trade_size": obj.get("minimumTradeSize"),
            "maximum_trailing_stop_distance": obj.get("maximumTrailingStopDistance"),
            "minimum_trailing_stop_distance": obj.get("minimumTrailingStopDistance"),
            "maximum_position_size": obj.get("maximumPositionSize"),
            "maximum_order_units": obj.get("maximumOrderUnits"),
            "margin_rate": obj.get("marginRate"),
            "commission": InstrumentCommission.from_dict(obj.get("commission")) if obj.get("commission") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


