# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from pyfx.dispatch.oanda.models.position_side import PositionSide

class Position(BaseModel):
    """
    The specification of a Position within an Account.
    """
    instrument: Optional[StrictStr] = Field(None, description="The Position's Instrument.")
    pl: Optional[StrictStr] = Field(None, description="Profit/loss realized by the Position over the lifetime of the Account.")
    unrealized_pl: Optional[StrictStr] = Field(None, alias="unrealizedPL", description="The unrealized profit/loss of all open Trades that contribute to this Position.")
    margin_used: Optional[StrictStr] = Field(None, alias="marginUsed", description="Margin currently used by the Position.")
    resettable_pl: Optional[StrictStr] = Field(None, alias="resettablePL", description="Profit/loss realized by the Position since the Account's resettablePL was last reset by the client.")
    financing: Optional[StrictStr] = Field(None, description="The total amount of financing paid/collected for this instrument over the lifetime of the Account.")
    commission: Optional[StrictStr] = Field(None, description="The total amount of commission paid for this instrument over the lifetime of the Account.")
    guaranteed_execution_fees: Optional[StrictStr] = Field(None, alias="guaranteedExecutionFees", description="The total amount of fees charged over the lifetime of the Account for the execution of guaranteed Stop Loss Orders for this instrument.")
    long: Optional[PositionSide] = None
    short: Optional[PositionSide] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["instrument", "pl", "unrealizedPL", "marginUsed", "resettablePL", "financing", "commission", "guaranteedExecutionFees", "long", "short"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Position:
        """Create an instance of Position from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of long
        if self.long:
            _dict['long'] = self.long.to_dict()
        # override the default output from pydantic by calling `to_dict()` of short
        if self.short:
            _dict['short'] = self.short.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Position:
        """Create an instance of Position from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Position.parse_obj(obj)

        _obj = Position.parse_obj({
            "instrument": obj.get("instrument"),
            "pl": obj.get("pl"),
            "unrealized_pl": obj.get("unrealizedPL"),
            "margin_used": obj.get("marginUsed"),
            "resettable_pl": obj.get("resettablePL"),
            "financing": obj.get("financing"),
            "commission": obj.get("commission"),
            "guaranteed_execution_fees": obj.get("guaranteedExecutionFees"),
            "long": PositionSide.from_dict(obj.get("long")) if obj.get("long") is not None else None,
            "short": PositionSide.from_dict(obj.get("short")) if obj.get("short") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


