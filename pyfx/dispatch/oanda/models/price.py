# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25
    Contact: api@oanda.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from pyfx.dispatch.oanda.models.price_bucket import PriceBucket

class Price(BaseModel):
    """
    The Price representation
    """
    instrument: Optional[StrictStr] = Field(None, description="The Price's Instrument.")
    tradeable: Optional[StrictBool] = Field(None, description="Flag indicating if the Price is tradeable or not")
    timestamp: Optional[StrictStr] = Field(None, description="The date/time when the Price was created.")
    base_bid: Optional[StrictStr] = Field(None, alias="baseBid", description="The base bid price as calculated by pricing.")
    base_ask: Optional[StrictStr] = Field(None, alias="baseAsk", description="The base ask price as calculated by pricing.")
    bids: Optional[conlist(PriceBucket)] = Field(None, description="The list of prices and liquidity available on the Instrument's bid side. It is possible for this list to be empty if there is no bid liquidity currently available for the Instrument in the Account.")
    asks: Optional[conlist(PriceBucket)] = Field(None, description="The list of prices and liquidity available on the Instrument's ask side. It is possible for this list to be empty if there is no ask liquidity currently available for the Instrument in the Account.")
    closeout_bid: Optional[StrictStr] = Field(None, alias="closeoutBid", description="The closeout bid price. This price is used when a bid is required to closeout a Position (margin closeout or manual) yet there is no bid liquidity. The closeout bid is never used to open a new position.")
    closeout_ask: Optional[StrictStr] = Field(None, alias="closeoutAsk", description="The closeout ask price. This price is used when an ask is required to closeout a Position (margin closeout or manual) yet there is no ask liquidity. The closeout ask is never used to open a new position.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["instrument", "tradeable", "timestamp", "baseBid", "baseAsk", "bids", "asks", "closeoutBid", "closeoutAsk"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Price:
        """Create an instance of Price from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in bids (list)
        _items = []
        if self.bids:
            for _item in self.bids:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bids'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in asks (list)
        _items = []
        if self.asks:
            for _item in self.asks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['asks'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Price:
        """Create an instance of Price from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Price.parse_obj(obj)

        _obj = Price.parse_obj({
            "instrument": obj.get("instrument"),
            "tradeable": obj.get("tradeable"),
            "timestamp": obj.get("timestamp"),
            "base_bid": obj.get("baseBid"),
            "base_ask": obj.get("baseAsk"),
            "bids": [PriceBucket.from_dict(_item) for _item in obj.get("bids")] if obj.get("bids") is not None else None,
            "asks": [PriceBucket.from_dict(_item) for _item in obj.get("asks")] if obj.get("asks") is not None else None,
            "closeout_bid": obj.get("closeoutBid"),
            "closeout_ask": obj.get("closeoutAsk")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


