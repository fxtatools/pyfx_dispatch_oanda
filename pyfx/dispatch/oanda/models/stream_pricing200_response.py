# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25
    Contact: api@oanda.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel
from pyfx.dispatch.oanda.models.client_price import ClientPrice
from pyfx.dispatch.oanda.models.pricing_heartbeat import PricingHeartbeat

class StreamPricing200Response(BaseModel):
    """
    The response body for the Pricing Stream uses chunked transfer encoding.  Each chunk contains Price and/or PricingHeartbeat objects encoded as JSON.  Each JSON object is serialized into a single line of text, and multiple objects found in the same chunk are separated by newlines. Heartbeats are sent every 5 seconds.
    """
    price: Optional[ClientPrice] = None
    heartbeat: Optional[PricingHeartbeat] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["price", "heartbeat"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StreamPricing200Response:
        """Create an instance of StreamPricing200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of heartbeat
        if self.heartbeat:
            _dict['heartbeat'] = self.heartbeat.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StreamPricing200Response:
        """Create an instance of StreamPricing200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StreamPricing200Response.parse_obj(obj)

        _obj = StreamPricing200Response.parse_obj({
            "price": ClientPrice.from_dict(obj.get("price")) if obj.get("price") is not None else None,
            "heartbeat": PricingHeartbeat.from_dict(obj.get("heartbeat")) if obj.get("heartbeat") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


