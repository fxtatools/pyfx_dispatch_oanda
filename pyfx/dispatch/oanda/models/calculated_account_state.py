# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25
    Contact: api@oanda.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class CalculatedAccountState(BaseModel):
    """
    The dynamically calculated state of a client's Account.
    """
    unrealized_pl: Optional[StrictStr] = Field(None, alias="unrealizedPL", description="The total unrealized profit/loss for all Trades currently open in the Account.")
    nav: Optional[StrictStr] = Field(None, alias="NAV", description="The net asset value of the Account. Equal to Account balance + unrealizedPL.")
    margin_used: Optional[StrictStr] = Field(None, alias="marginUsed", description="Margin currently used for the Account.")
    margin_available: Optional[StrictStr] = Field(None, alias="marginAvailable", description="Margin available for Account currency.")
    position_value: Optional[StrictStr] = Field(None, alias="positionValue", description="The value of the Account's open positions represented in the Account's home currency.")
    margin_closeout_unrealized_pl: Optional[StrictStr] = Field(None, alias="marginCloseoutUnrealizedPL", description="The Account's margin closeout unrealized PL.")
    margin_closeout_nav: Optional[StrictStr] = Field(None, alias="marginCloseoutNAV", description="The Account's margin closeout NAV.")
    margin_closeout_margin_used: Optional[StrictStr] = Field(None, alias="marginCloseoutMarginUsed", description="The Account's margin closeout margin used.")
    margin_closeout_percent: Optional[StrictStr] = Field(None, alias="marginCloseoutPercent", description="The Account's margin closeout percentage. When this value is 1.0 or above the Account is in a margin closeout situation.")
    margin_closeout_position_value: Optional[StrictStr] = Field(None, alias="marginCloseoutPositionValue", description="The value of the Account's open positions as used for margin closeout calculations represented in the Account's home currency.")
    withdrawal_limit: Optional[StrictStr] = Field(None, alias="withdrawalLimit", description="The current WithdrawalLimit for the account which will be zero or a positive value indicating how much can be withdrawn from the account.")
    margin_call_margin_used: Optional[StrictStr] = Field(None, alias="marginCallMarginUsed", description="The Account's margin call margin used.")
    margin_call_percent: Optional[StrictStr] = Field(None, alias="marginCallPercent", description="The Account's margin call percentage. When this value is 1.0 or above the Account is in a margin call situation.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["unrealizedPL", "NAV", "marginUsed", "marginAvailable", "positionValue", "marginCloseoutUnrealizedPL", "marginCloseoutNAV", "marginCloseoutMarginUsed", "marginCloseoutPercent", "marginCloseoutPositionValue", "withdrawalLimit", "marginCallMarginUsed", "marginCallPercent"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CalculatedAccountState:
        """Create an instance of CalculatedAccountState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CalculatedAccountState:
        """Create an instance of CalculatedAccountState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CalculatedAccountState.parse_obj(obj)

        _obj = CalculatedAccountState.parse_obj({
            "unrealized_pl": obj.get("unrealizedPL"),
            "nav": obj.get("NAV"),
            "margin_used": obj.get("marginUsed"),
            "margin_available": obj.get("marginAvailable"),
            "position_value": obj.get("positionValue"),
            "margin_closeout_unrealized_pl": obj.get("marginCloseoutUnrealizedPL"),
            "margin_closeout_nav": obj.get("marginCloseoutNAV"),
            "margin_closeout_margin_used": obj.get("marginCloseoutMarginUsed"),
            "margin_closeout_percent": obj.get("marginCloseoutPercent"),
            "margin_closeout_position_value": obj.get("marginCloseoutPositionValue"),
            "withdrawal_limit": obj.get("withdrawalLimit"),
            "margin_call_margin_used": obj.get("marginCallMarginUsed"),
            "margin_call_percent": obj.get("marginCallPercent")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


