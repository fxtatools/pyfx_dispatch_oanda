# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25
    Contact: api@oanda.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from pyfx.dispatch.oanda.models.client_extensions import ClientExtensions

class TradeOpen(BaseModel):
    """
    A TradeOpen object represents a Trade for an instrument that was opened in an Account. It is found embedded in Transactions that affect the position of an instrument in the Account, specifically the OrderFill Transaction.
    """
    trade_id: Optional[StrictStr] = Field(None, alias="tradeID", description="The ID of the Trade that was opened")
    units: Optional[StrictStr] = Field(None, description="The number of units opened by the Trade")
    price: Optional[StrictStr] = Field(None, description="The average price that the units were opened at.")
    guaranteed_execution_fee: Optional[StrictStr] = Field(None, alias="guaranteedExecutionFee", description="This is the fee charged for opening the trade if it has a guaranteed Stop Loss Order attached to it.")
    client_extensions: Optional[ClientExtensions] = Field(None, alias="clientExtensions")
    half_spread_cost: Optional[StrictStr] = Field(None, alias="halfSpreadCost", description="The half spread cost for the trade open. This can be a positive or negative value and is represented in the home currency of the Account.")
    initial_margin_required: Optional[StrictStr] = Field(None, alias="initialMarginRequired", description="The margin required at the time the Trade was created. Note, this is the 'pure' margin required, it is not the 'effective' margin used that factors in the trade risk if a GSLO is attached to the trade.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["tradeID", "units", "price", "guaranteedExecutionFee", "clientExtensions", "halfSpreadCost", "initialMarginRequired"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TradeOpen:
        """Create an instance of TradeOpen from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of client_extensions
        if self.client_extensions:
            _dict['clientExtensions'] = self.client_extensions.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TradeOpen:
        """Create an instance of TradeOpen from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TradeOpen.parse_obj(obj)

        _obj = TradeOpen.parse_obj({
            "trade_id": obj.get("tradeID"),
            "units": obj.get("units"),
            "price": obj.get("price"),
            "guaranteed_execution_fee": obj.get("guaranteedExecutionFee"),
            "client_extensions": ClientExtensions.from_dict(obj.get("clientExtensions")) if obj.get("clientExtensions") is not None else None,
            "half_spread_cost": obj.get("halfSpreadCost"),
            "initial_margin_required": obj.get("initialMarginRequired")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


