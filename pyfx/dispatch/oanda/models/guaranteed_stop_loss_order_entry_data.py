# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from pyfx.dispatch.oanda.models.guaranteed_stop_loss_order_level_restriction import GuaranteedStopLossOrderLevelRestriction

class GuaranteedStopLossOrderEntryData(BaseModel):
    """
    Details required by clients creating a Guaranteed Stop Loss Order
    """
    minimum_distance: Optional[StrictStr] = Field(None, alias="minimumDistance", description="The minimum distance allowed between the Trade's fill price and the configured price for guaranteed Stop Loss Orders created for this instrument. Specified in price units.")
    premium: Optional[StrictStr] = Field(None, description="The amount that is charged to the account if a guaranteed Stop Loss Order is triggered and filled. The value is in price units and is charged for each unit of the Trade.")
    level_restriction: Optional[GuaranteedStopLossOrderLevelRestriction] = Field(None, alias="levelRestriction")
    additional_properties: Dict[str, Any] = {}
    __properties = ["minimumDistance", "premium", "levelRestriction"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GuaranteedStopLossOrderEntryData:
        """Create an instance of GuaranteedStopLossOrderEntryData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of level_restriction
        if self.level_restriction:
            _dict['levelRestriction'] = self.level_restriction.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GuaranteedStopLossOrderEntryData:
        """Create an instance of GuaranteedStopLossOrderEntryData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GuaranteedStopLossOrderEntryData.parse_obj(obj)

        _obj = GuaranteedStopLossOrderEntryData.parse_obj({
            "minimum_distance": obj.get("minimumDistance"),
            "premium": obj.get("premium"),
            "level_restriction": GuaranteedStopLossOrderLevelRestriction.from_dict(obj.get("levelRestriction")) if obj.get("levelRestriction") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


