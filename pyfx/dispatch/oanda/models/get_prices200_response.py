# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25
    Contact: api@oanda.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from pyfx.dispatch.oanda.models.client_price import ClientPrice
from pyfx.dispatch.oanda.models.home_conversions import HomeConversions

class GetPrices200Response(BaseModel):
    """
    GetPrices200Response
    """
    prices: Optional[conlist(ClientPrice)] = Field(None, description="The list of Price objects requested.")
    home_conversions: Optional[conlist(HomeConversions)] = Field(None, alias="homeConversions", description="The list of home currency conversion factors requested. This field will only be present if includeHomeConversions was set to true in the request.")
    time: Optional[StrictStr] = Field(None, description="The DateTime value to use for the \"since\" parameter in the next poll request.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["prices", "homeConversions", "time"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetPrices200Response:
        """Create an instance of GetPrices200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in prices (list)
        _items = []
        if self.prices:
            for _item in self.prices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['prices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in home_conversions (list)
        _items = []
        if self.home_conversions:
            for _item in self.home_conversions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['homeConversions'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetPrices200Response:
        """Create an instance of GetPrices200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetPrices200Response.parse_obj(obj)

        _obj = GetPrices200Response.parse_obj({
            "prices": [ClientPrice.from_dict(_item) for _item in obj.get("prices")] if obj.get("prices") is not None else None,
            "home_conversions": [HomeConversions.from_dict(_item) for _item in obj.get("homeConversions")] if obj.get("homeConversions") is not None else None,
            "time": obj.get("time")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


