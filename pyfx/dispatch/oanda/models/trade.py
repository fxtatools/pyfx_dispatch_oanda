# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25
    Contact: api@oanda.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from pyfx.dispatch.oanda.models.client_extensions import ClientExtensions
from pyfx.dispatch.oanda.models.stop_loss_order import StopLossOrder
from pyfx.dispatch.oanda.models.take_profit_order import TakeProfitOrder
from pyfx.dispatch.oanda.models.trailing_stop_loss_order import TrailingStopLossOrder

class Trade(BaseModel):
    """
    The specification of a Trade within an Account. This includes the full representation of the Trade's dependent Orders in addition to the IDs of those Orders.
    """
    id: Optional[StrictStr] = Field(None, description="The Trade's identifier, unique within the Trade's Account.")
    instrument: Optional[StrictStr] = Field(None, description="The Trade's Instrument.")
    price: Optional[StrictStr] = Field(None, description="The execution price of the Trade.")
    open_time: Optional[StrictStr] = Field(None, alias="openTime", description="The date/time when the Trade was opened.")
    state: Optional[StrictStr] = Field(None, description="The current state of the Trade.")
    initial_units: Optional[StrictStr] = Field(None, alias="initialUnits", description="The initial size of the Trade. Negative values indicate a short Trade, and positive values indicate a long Trade.")
    initial_margin_required: Optional[StrictStr] = Field(None, alias="initialMarginRequired", description="The margin required at the time the Trade was created. Note, this is the 'pure' margin required, it is not the 'effective' margin used that factors in the trade risk if a GSLO is attached to the trade.")
    current_units: Optional[StrictStr] = Field(None, alias="currentUnits", description="The number of units currently open for the Trade. This value is reduced to 0.0 as the Trade is closed.")
    realized_pl: Optional[StrictStr] = Field(None, alias="realizedPL", description="The total profit/loss realized on the closed portion of the Trade.")
    unrealized_pl: Optional[StrictStr] = Field(None, alias="unrealizedPL", description="The unrealized profit/loss on the open portion of the Trade.")
    margin_used: Optional[StrictStr] = Field(None, alias="marginUsed", description="Margin currently used by the Trade.")
    average_close_price: Optional[StrictStr] = Field(None, alias="averageClosePrice", description="The average closing price of the Trade. Only present if the Trade has been closed or reduced at least once.")
    closing_transaction_ids: Optional[conlist(StrictStr)] = Field(None, alias="closingTransactionIDs", description="The IDs of the Transactions that have closed portions of this Trade.")
    financing: Optional[StrictStr] = Field(None, description="The financing paid/collected for this Trade.")
    close_time: Optional[StrictStr] = Field(None, alias="closeTime", description="The date/time when the Trade was fully closed. Only provided for Trades whose state is CLOSED.")
    client_extensions: Optional[ClientExtensions] = Field(None, alias="clientExtensions")
    take_profit_order: Optional[TakeProfitOrder] = Field(None, alias="takeProfitOrder")
    stop_loss_order: Optional[StopLossOrder] = Field(None, alias="stopLossOrder")
    trailing_stop_loss_order: Optional[TrailingStopLossOrder] = Field(None, alias="trailingStopLossOrder")
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "instrument", "price", "openTime", "state", "initialUnits", "initialMarginRequired", "currentUnits", "realizedPL", "unrealizedPL", "marginUsed", "averageClosePrice", "closingTransactionIDs", "financing", "closeTime", "clientExtensions", "takeProfitOrder", "stopLossOrder", "trailingStopLossOrder"]

    @validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('OPEN', 'CLOSED', 'CLOSE_WHEN_TRADEABLE'):
            raise ValueError("must be one of enum values ('OPEN', 'CLOSED', 'CLOSE_WHEN_TRADEABLE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Trade:
        """Create an instance of Trade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of client_extensions
        if self.client_extensions:
            _dict['clientExtensions'] = self.client_extensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of take_profit_order
        if self.take_profit_order:
            _dict['takeProfitOrder'] = self.take_profit_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stop_loss_order
        if self.stop_loss_order:
            _dict['stopLossOrder'] = self.stop_loss_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trailing_stop_loss_order
        if self.trailing_stop_loss_order:
            _dict['trailingStopLossOrder'] = self.trailing_stop_loss_order.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Trade:
        """Create an instance of Trade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Trade.parse_obj(obj)

        _obj = Trade.parse_obj({
            "id": obj.get("id"),
            "instrument": obj.get("instrument"),
            "price": obj.get("price"),
            "open_time": obj.get("openTime"),
            "state": obj.get("state"),
            "initial_units": obj.get("initialUnits"),
            "initial_margin_required": obj.get("initialMarginRequired"),
            "current_units": obj.get("currentUnits"),
            "realized_pl": obj.get("realizedPL"),
            "unrealized_pl": obj.get("unrealizedPL"),
            "margin_used": obj.get("marginUsed"),
            "average_close_price": obj.get("averageClosePrice"),
            "closing_transaction_ids": obj.get("closingTransactionIDs"),
            "financing": obj.get("financing"),
            "close_time": obj.get("closeTime"),
            "client_extensions": ClientExtensions.from_dict(obj.get("clientExtensions")) if obj.get("clientExtensions") is not None else None,
            "take_profit_order": TakeProfitOrder.from_dict(obj.get("takeProfitOrder")) if obj.get("takeProfitOrder") is not None else None,
            "stop_loss_order": StopLossOrder.from_dict(obj.get("stopLossOrder")) if obj.get("stopLossOrder") is not None else None,
            "trailing_stop_loss_order": TrailingStopLossOrder.from_dict(obj.get("trailingStopLossOrder")) if obj.get("trailingStopLossOrder") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


