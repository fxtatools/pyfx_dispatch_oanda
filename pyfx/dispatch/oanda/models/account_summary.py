# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.

    The version of the OpenAPI document: 3.0.25

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator

class AccountSummary(BaseModel):
    """
    A summary representation of a client's Account. The AccountSummary does not provide to full specification of pending Orders, open Trades and Positions.
    """
    id: Optional[StrictStr] = Field(None, description="The Account's identifier")
    alias: Optional[StrictStr] = Field(None, description="Client-assigned alias for the Account. Only provided if the Account has an alias set")
    currency: Optional[StrictStr] = Field(None, description="The home currency of the Account")
    balance: Optional[StrictStr] = Field(None, description="The current balance of the Account.")
    created_by_user_id: Optional[StrictInt] = Field(None, alias="createdByUserID", description="ID of the user that created the Account.")
    created_time: Optional[StrictStr] = Field(None, alias="createdTime", description="The date/time when the Account was created.")
    guaranteed_stop_loss_order_mode: Optional[StrictStr] = Field(None, alias="guaranteedStopLossOrderMode", description="The current guaranteed Stop Loss Order mode of the Account.")
    pl: Optional[StrictStr] = Field(None, description="The total profit/loss realized over the lifetime of the Account.")
    resettable_pl: Optional[StrictStr] = Field(None, alias="resettablePL", description="The total realized profit/loss for the Account since it was last reset by the client.")
    resettable_pl_time: Optional[StrictStr] = Field(None, alias="resettablePLTime", description="The date/time that the Account's resettablePL was last reset.")
    financing: Optional[StrictStr] = Field(None, description="The total amount of financing paid/collected over the lifetime of the Account.")
    commission: Optional[StrictStr] = Field(None, description="The total amount of commission paid over the lifetime of the Account.")
    guaranteed_execution_fees: Optional[StrictStr] = Field(None, alias="guaranteedExecutionFees", description="The total amount of fees charged over the lifetime of the Account for the execution of guaranteed Stop Loss Orders.")
    margin_rate: Optional[StrictStr] = Field(None, alias="marginRate", description="Client-provided margin rate override for the Account. The effective margin rate of the Account is the lesser of this value and the OANDA margin rate for the Account's division. This value is only provided if a margin rate override exists for the Account.")
    margin_call_enter_time: Optional[StrictStr] = Field(None, alias="marginCallEnterTime", description="The date/time when the Account entered a margin call state. Only provided if the Account is in a margin call.")
    margin_call_extension_count: Optional[StrictInt] = Field(None, alias="marginCallExtensionCount", description="The number of times that the Account's current margin call was extended.")
    last_margin_call_extension_time: Optional[StrictStr] = Field(None, alias="lastMarginCallExtensionTime", description="The date/time of the Account's last margin call extension.")
    open_trade_count: Optional[StrictInt] = Field(None, alias="openTradeCount", description="The number of Trades currently open in the Account.")
    open_position_count: Optional[StrictInt] = Field(None, alias="openPositionCount", description="The number of Positions currently open in the Account.")
    pending_order_count: Optional[StrictInt] = Field(None, alias="pendingOrderCount", description="The number of Orders currently pending in the Account.")
    hedging_enabled: Optional[StrictBool] = Field(None, alias="hedgingEnabled", description="Flag indicating that the Account has hedging enabled.")
    last_order_fill_timestamp: Optional[StrictStr] = Field(None, alias="lastOrderFillTimestamp", description="The date/time of the last order that was filled for this account.")
    unrealized_pl: Optional[StrictStr] = Field(None, alias="unrealizedPL", description="The total unrealized profit/loss for all Trades currently open in the Account.")
    nav: Optional[StrictStr] = Field(None, alias="NAV", description="The net asset value of the Account. Equal to Account balance + unrealizedPL.")
    margin_used: Optional[StrictStr] = Field(None, alias="marginUsed", description="Margin currently used for the Account.")
    margin_available: Optional[StrictStr] = Field(None, alias="marginAvailable", description="Margin available for Account currency.")
    position_value: Optional[StrictStr] = Field(None, alias="positionValue", description="The value of the Account's open positions represented in the Account's home currency.")
    margin_closeout_unrealized_pl: Optional[StrictStr] = Field(None, alias="marginCloseoutUnrealizedPL", description="The Account's margin closeout unrealized PL.")
    margin_closeout_nav: Optional[StrictStr] = Field(None, alias="marginCloseoutNAV", description="The Account's margin closeout NAV.")
    margin_closeout_margin_used: Optional[StrictStr] = Field(None, alias="marginCloseoutMarginUsed", description="The Account's margin closeout margin used.")
    margin_closeout_percent: Optional[StrictStr] = Field(None, alias="marginCloseoutPercent", description="The Account's margin closeout percentage. When this value is 1.0 or above the Account is in a margin closeout situation.")
    margin_closeout_position_value: Optional[StrictStr] = Field(None, alias="marginCloseoutPositionValue", description="The value of the Account's open positions as used for margin closeout calculations represented in the Account's home currency.")
    withdrawal_limit: Optional[StrictStr] = Field(None, alias="withdrawalLimit", description="The current WithdrawalLimit for the account which will be zero or a positive value indicating how much can be withdrawn from the account.")
    margin_call_margin_used: Optional[StrictStr] = Field(None, alias="marginCallMarginUsed", description="The Account's margin call margin used.")
    margin_call_percent: Optional[StrictStr] = Field(None, alias="marginCallPercent", description="The Account's margin call percentage. When this value is 1.0 or above the Account is in a margin call situation.")
    last_transaction_id: Optional[StrictStr] = Field(None, alias="lastTransactionID", description="The ID of the last Transaction created for the Account.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "alias", "currency", "balance", "createdByUserID", "createdTime", "guaranteedStopLossOrderMode", "pl", "resettablePL", "resettablePLTime", "financing", "commission", "guaranteedExecutionFees", "marginRate", "marginCallEnterTime", "marginCallExtensionCount", "lastMarginCallExtensionTime", "openTradeCount", "openPositionCount", "pendingOrderCount", "hedgingEnabled", "lastOrderFillTimestamp", "unrealizedPL", "NAV", "marginUsed", "marginAvailable", "positionValue", "marginCloseoutUnrealizedPL", "marginCloseoutNAV", "marginCloseoutMarginUsed", "marginCloseoutPercent", "marginCloseoutPositionValue", "withdrawalLimit", "marginCallMarginUsed", "marginCallPercent", "lastTransactionID"]

    @validator('guaranteed_stop_loss_order_mode')
    def guaranteed_stop_loss_order_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DISABLED', 'ALLOWED', 'REQUIRED'):
            raise ValueError("must be one of enum values ('DISABLED', 'ALLOWED', 'REQUIRED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountSummary:
        """Create an instance of AccountSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountSummary:
        """Create an instance of AccountSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountSummary.parse_obj(obj)

        _obj = AccountSummary.parse_obj({
            "id": obj.get("id"),
            "alias": obj.get("alias"),
            "currency": obj.get("currency"),
            "balance": obj.get("balance"),
            "created_by_user_id": obj.get("createdByUserID"),
            "created_time": obj.get("createdTime"),
            "guaranteed_stop_loss_order_mode": obj.get("guaranteedStopLossOrderMode"),
            "pl": obj.get("pl"),
            "resettable_pl": obj.get("resettablePL"),
            "resettable_pl_time": obj.get("resettablePLTime"),
            "financing": obj.get("financing"),
            "commission": obj.get("commission"),
            "guaranteed_execution_fees": obj.get("guaranteedExecutionFees"),
            "margin_rate": obj.get("marginRate"),
            "margin_call_enter_time": obj.get("marginCallEnterTime"),
            "margin_call_extension_count": obj.get("marginCallExtensionCount"),
            "last_margin_call_extension_time": obj.get("lastMarginCallExtensionTime"),
            "open_trade_count": obj.get("openTradeCount"),
            "open_position_count": obj.get("openPositionCount"),
            "pending_order_count": obj.get("pendingOrderCount"),
            "hedging_enabled": obj.get("hedgingEnabled"),
            "last_order_fill_timestamp": obj.get("lastOrderFillTimestamp"),
            "unrealized_pl": obj.get("unrealizedPL"),
            "nav": obj.get("NAV"),
            "margin_used": obj.get("marginUsed"),
            "margin_available": obj.get("marginAvailable"),
            "position_value": obj.get("positionValue"),
            "margin_closeout_unrealized_pl": obj.get("marginCloseoutUnrealizedPL"),
            "margin_closeout_nav": obj.get("marginCloseoutNAV"),
            "margin_closeout_margin_used": obj.get("marginCloseoutMarginUsed"),
            "margin_closeout_percent": obj.get("marginCloseoutPercent"),
            "margin_closeout_position_value": obj.get("marginCloseoutPositionValue"),
            "withdrawal_limit": obj.get("withdrawalLimit"),
            "margin_call_margin_used": obj.get("marginCallMarginUsed"),
            "margin_call_percent": obj.get("marginCallPercent"),
            "last_transaction_id": obj.get("lastTransactionID")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


